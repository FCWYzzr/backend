{
  "openapi": "3.0.2",
  "info": {
    "title": "BackEnd",
    "version": "1.0",
    "description": "for web socket doc, see /api-group"
  },
  "components": {
    "schemas": {}
  },
  "paths": {
    "/ping":  {
      "get": {
        "tags": [
          "test"
        ],
        "description": "test if server is running or not",
        "responses": {
          "200": {
            "description": "server is running"
          }
        }
      }
    },

    "/signin": {
      "post": {
        "tags": [
          "user-system"
        ],
        "description": "common sign in service using a user identifier(username, phone, email, uid, etc.) & password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "signInParam",
                "description": "normal sign in param using name/email/phone/uid & pwd",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "username or email or phone or uid (yes, uuid-generated user id, aka uid)"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "response body",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, null if code is not 200",
                      "properties": {
                        "userId": {
                          "type": "integer",
                          "description": "user id"
                        },
                        "code": {
                          "type": "string",
                          "description": "hashcode, for client to 'auto-signin'"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auto-signin": {
      "post": {
        "tags": [
          "user-system"
        ],
        "description": "auto sign in service, using uid and a code to signin. since the code is the hash of user info, front-end could simply store it in user's browser.",

        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "autoSignInParam",
                "description": "auto sign in param, using uid & code",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "user id"
                  },
                  "code": {
                    "type": "string",
                    "description": "provided by server the last time client signin"
                  }
                }
              }
            }
          }

        },
        "responses": {
          "200": {
            "description": "auto sign in success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "if code is not 200, this field will be set to the reason of failure"
                    },
                    "body": {
                      "type": "object",
                      "nullable": true,
                      "description": "response body, null if code is not 200",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "the code client should save for next auto-signin session"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "post": {
        "tags": [
          "user-system"
        ],
        "description": "send verify message",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "user name, using for friendly greetings",
                    "type": "string"
                  },
                  "contact": {
                    "description": "user phone or email",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "response body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "success or not"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "if code is not 200, this field will be set to the reason of failure"
                    },
                    "body": {
                      "type": "object",
                      "nullable": true,
                      "description": "this body is a placeholder, always null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "user-system"
        ],
        "description": "sign up a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "contact": {
                    "type": "string",
                    "description": "email or phone"
                  },
                  "code": {
                    "type": "string",
                    "description": "verify code"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "response body",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, null if code is not 200",
                      "properties": {
                        "userId": {
                          "type": "integer",
                          "description": "user id"
                        },
                        "code": {
                          "type": "string",
                          "description": "hashcode, for client to 'auto-signin'"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signup/identify": {
      "post": {
        "description": "上传用户验证图片",
        "parameters": [
          {
            "name": "X-User-Id",
            "description": "用户Id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-User-Code",
            "description": "用户口令",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "图片",
          "required": true,
          "content": {
            "image/png": {}
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "tags": [
          "user-system"
        ],
        "description": "",
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "userId",
          "content": {
            "text/plain": {
                "schema": {
                    "type": "integer",
                    "description": "user id"
                }
            }
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, null if code is not 200",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "user name"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "UNKNOWN",
                            "STUDENT",
                            "COMPANY"
                          ],
                          "description": "user type, one of UNKNOWN, STUDENT and COMPANY"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/goods/publish": {
      "post": {
        "description": "publish a new goods",
        "tags": [
          "goods-system"
        ],
        "parameters": [{
            "in": "header",
            "name": "X-User-Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "user id"
            }
        },{
            "in": "header",
            "name": "X-User-Code",
            "required": true,
            "schema": {
                "type": "string",
                "description": "user code"
            }
        }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "goodsName": {
                    "type": "string"
                  },
                  "publishDate": {
                    "type": "integer",
                    "description": "publish date in epoch seconds"
                  },
                  "validDate": {
                    "type": "integer",
                    "description": "valid date in epoch seconds"
                  },
                  "money": {
                    "type": "integer",
                    "description": "price in cents"
                  },
                  "keywords": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "keywords, shall includes goods name"
                    }
                  },
                  "goodsType": {
                    "type": "string",
                    "enum": [
                      "OBJECT",
                      "FAVOR"
                    ],
                    "description": "one of ( OBJECT, FAVOR )"
                  },
                  "ioType": {
                    "type": "string",
                    "enum": [
                      "SELLING",
                      "ACQUISITION"
                    ],
                    "description": "one of ( SELLING, ACQUISITION )"
                  },
                  "tags": {
                    "type": "string",
                    "description": "tags, separated by semicolon ';' "
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, null if code is not 200",
                      "properties": {
                        "goodsId": {
                          "type": "integer",
                          "description": "goods id"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/goods/remove": {
      "delete": {
        "description": "remove a goods",
        "tags": [
          "goods-system"
        ],
        "parameters": [{
          "in": "header",
          "name": "X-User-Id",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "user id"
          }
        },{
          "in": "header",
          "name": "X-User-Code",
          "required": true,
          "schema": {
            "type": "string",
            "description": "user code"
          }
        }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "goodsId": {
                    "type": "integer",
                    "description": "goods id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "response body",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, placeholder, always null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/goods/icon": {
      "get": {
        "description": "get goods icon",
        "tags": [
          "goods-system"
        ],
        "parameters": [{
          "in": "path",
          "name": "goodsId",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "goods id"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "invalid query"
          },
          "404": {
            "description": "goods not found"
          }
        }
      },
      "put": {
        "description": "upload goods icon",
        "tags": [
          "goods-system"
        ],
        "parameters": [{
          "in": "header",
          "name": "X-Goods-Id",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "goods id"
          }
        },{
          "in": "header",
          "name": "X-User-Id",
          "required": true,
          "schema": {
            "type": "string",
            "description": "user id"
          }
        },{
          "in": "header",
          "name": "X-User-Code",
          "required": true,
          "schema": {
            "type": "string",
            "description": "user code"
          }
        }],
        "requestBody": {
          "required": true,
          "content": {
            "image/png": {}
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/query/info": {
      "get": {
        "tags": [
          "goods-system"
        ],
        "parameters": [{
          "in": "path",
          "name": "goodsIds",
          "required": true,
          "schema": {
            "type": "string",
            "description": "goods ids, separated by semicolon ';', note that non-exist or invalid goods id is also acceptable"
          }
        }],
        "responses": {
          "200": {
            "description": "query result",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "response code"
                    },
                    "reason": {
                      "nullable": true,
                      "type": "string",
                      "description": "response reason, null if code is 200"
                    },
                    "body": {
                      "nullable": true,
                      "type": "object",
                      "description": "response body, null if code is not 200, actually a dictionary, key is goods id, value is goods info",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "price": {
                            "description": "price in cents",
                            "type": "integer"
                          },
                          "publisherType": {
                            "enum": [
                              "STUDENT",
                              "COMPANY"
                            ],
                            "description": "one of ( STUDENT, COMPANY )",
                            "type": "string"
                          },
                          "ioType": {
                            "description": "one of ( SELLING, ACQUISITION )",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "get": {
        "description": "fetch latest goods, or search goods by keywords",
        "tags": [
          "goods-system"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "keywords",
            "schema": {
              "type": "string",
              "description": "keywords, separated by semicolon ';'"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "minCost",
            "schema": {
              "type": "integer",
              "description": "min cost in cents, if not provide, this value will be set to 0"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "maxCost",
            "schema": {
              "type": "integer",
              "description": "max cost in cents, if not provide, this value will be set to integer max value"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "publisher",
            "schema": {
              "type": "string",
              "description": "publisher type, one of ( STUDENT, COMPANY; if not provide, this filter will be disabled )"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "ioType",
            "schema": {
              "type": "string",
              "description": "io type, one of ( SELLING, ACQUISITION; if not provide, this filter will be disabled )"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "goodsType",
            "schema": {
              "type": "string",
              "description": "goods type, one of ( OBJECT, FAVOR; if not provide, this filter will be disabled )"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "tags",
            "schema": {
              "type": "string",
              "description": "tags, separated by semicolon ';'"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "page number, start from 0, default value is 0"
            }
          },
          {
            "in": "path",
            "required": true,
            "allowEmptyValue": true,
            "name": "perPage",
            "schema": {
              "type": "integer",
              "description": "page size, default value is 10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "body",
            "content": {
              "application/json": {
                "schema": {
                  "description": "response body",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "status code"
                    },
                    "reason": {
                      "type": "string",
                      "nullable": true,
                      "description": "null if code is 200"
                    },
                    "body": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "query result, containing goods id, goods score, and keywords info of each goods",
                        "properties": {
                          "goodsId": {
                            "type": "integer"
                          },
                          "score": {
                            "type": "integer",
                            "description": "score of this goods, higher score means more relevant to the keywords. note that ret.score = sum(ret.keywords.values())"
                          },
                          "keywords": {
                            "type": "object",
                            "description": "the weight of this keyword in this goods.",
                            "additionalProperties": {
                              "type": "number",
                              "description": " score = keywords_fit_time / keywords_total_match_times / keywords_appear_count"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/group/redirect": {
      "get": {
        "description": "get group id by goods id",
        "tags": [
          "group-system"
        ],
        "parameters": [{
          "in": "path",
          "name": "goodsId",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "goods id"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "status code"
                    },
                    "reason": {
                      "type": "string",
                      "nullable": true,
                      "description": "fail reason, null if code is 200"
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "groupId": {
                          "type": "integer",
                          "description": "group id"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/group/seller": {
      "get": {
        "description": "get seller id by group id",
        "tags": [
          "group-system"
        ],
        "parameters": [{
          "in": "path",
          "name": "groupId",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "group id"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "status code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "null if code is 200"
                    },
                    "body": {
                      "type": "object",
                      "properties": {
                        "sellerId": {
                          "type": "integer",
                          "description": "seller id"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
